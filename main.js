(()=>{var e={177:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,":root {\n  --content-bg-color: #0b2846;\n  --mild-white: #b0b1bd;\n  --mild-white-hover: #9495a0;\n  --midnight: #0e0f24;\n  --ship-bg-color: #9b3838;\n  --ship-undamaged-color: #418820;\n  --ship-damaged-color: #abad3a;\n  --ship-hover-color: #db3b3b;\n  --ship-selected-color: #007ba0;\n  --direction-hover-color: var(--mild-white-hover);\n  --direction-selected-color: #007ba0;\n  --tile-normal-color: #2d374f;\n  --tile-missed-color: #1d1e35;\n  --tile-hover-color: var(--mild-white);\n  --gameboard-bg-color: #606c80;\n  --error-red-color: #9b3838;\n\n  --default-border-radius: 3px;\n}\n\nbody {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n.content {\n  display: grid;\n  align-content: center;\n  justify-items: center;\n  gap: 20px;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n  background-color: var(--content-bg-color);\n}\n\n.player-space,\n.computer-space {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n}\n\n.player-space {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  justify-self: end;\n}\n\n.computer-space {\n  grid-column: 2 / 3;\n  grid-row: 1 / 2;\n  justify-self: start;\n}\n\nbutton {\n  font-size: 1rem;\n}\n\n/* Status messages */\n\n.message-window-wrapper {\n  height: 225px;\n  width: fit-content;\n  grid-column: 1 / 3;\n  grid-row: 2 / 3;\n}\n\n.message-window {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 20px;\n  border: 1px solid var(--midnight);\n  border-radius: 5px;\n  background-color: var(--gameboard-bg-color);\n  color: var(--midnight);\n}\n\n.message-window__messages {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n}\n\n.message-window__messages.hidden {\n  display: none;\n}\n\n.message-window__reset-btn:hover {\n  background-color: var(--mild-white-hover);\n  cursor: pointer;\n}\n\n.message-window__reset-btn {\n  border: 1px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  padding: 5px 10px;\n  color: var(--midnight);\n  background-color: var(--mild-white);\n  font-weight: bold;\n}\n\n.message-window__reset-btn.hidden {\n  display: none;\n}\n\n.message-window__outcome {\n  font-size: 2rem;\n}\n\n.message-window__outcome.hidden {\n  display: none;\n}\n\n.message-window_error {\n  background-color: var(--error-red-color);\n}\n","",{version:3,sources:["webpack://./src/styles/content.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,qBAAqB;EACrB,2BAA2B;EAC3B,mBAAmB;EACnB,wBAAwB;EACxB,+BAA+B;EAC/B,6BAA6B;EAC7B,2BAA2B;EAC3B,8BAA8B;EAC9B,gDAAgD;EAChD,mCAAmC;EACnC,4BAA4B;EAC5B,4BAA4B;EAC5B,qCAAqC;EACrC,6BAA6B;EAC7B,0BAA0B;;EAE1B,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,aAAa;EACb,yCAAyC;AAC3C;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,qBAAqB;EACrB,SAAS;EACT,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,yCAAyC;AAC3C;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA,oBAAoB;;AAEpB;EACE,aAAa;EACb,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,aAAa;EACb,iCAAiC;EACjC,kBAAkB;EAClB,2CAA2C;EAC3C,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,2CAA2C;EAC3C,iBAAiB;EACjB,sBAAsB;EACtB,mCAAmC;EACnC,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,wCAAwC;AAC1C",sourcesContent:[":root {\n  --content-bg-color: #0b2846;\n  --mild-white: #b0b1bd;\n  --mild-white-hover: #9495a0;\n  --midnight: #0e0f24;\n  --ship-bg-color: #9b3838;\n  --ship-undamaged-color: #418820;\n  --ship-damaged-color: #abad3a;\n  --ship-hover-color: #db3b3b;\n  --ship-selected-color: #007ba0;\n  --direction-hover-color: var(--mild-white-hover);\n  --direction-selected-color: #007ba0;\n  --tile-normal-color: #2d374f;\n  --tile-missed-color: #1d1e35;\n  --tile-hover-color: var(--mild-white);\n  --gameboard-bg-color: #606c80;\n  --error-red-color: #9b3838;\n\n  --default-border-radius: 3px;\n}\n\nbody {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n.content {\n  display: grid;\n  align-content: center;\n  justify-items: center;\n  gap: 20px;\n  width: 100%;\n  height: 100%;\n  user-select: none;\n  background-color: var(--content-bg-color);\n}\n\n.player-space,\n.computer-space {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n}\n\n.player-space {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  justify-self: end;\n}\n\n.computer-space {\n  grid-column: 2 / 3;\n  grid-row: 1 / 2;\n  justify-self: start;\n}\n\nbutton {\n  font-size: 1rem;\n}\n\n/* Status messages */\n\n.message-window-wrapper {\n  height: 225px;\n  width: fit-content;\n  grid-column: 1 / 3;\n  grid-row: 2 / 3;\n}\n\n.message-window {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 20px;\n  border: 1px solid var(--midnight);\n  border-radius: 5px;\n  background-color: var(--gameboard-bg-color);\n  color: var(--midnight);\n}\n\n.message-window__messages {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n}\n\n.message-window__messages.hidden {\n  display: none;\n}\n\n.message-window__reset-btn:hover {\n  background-color: var(--mild-white-hover);\n  cursor: pointer;\n}\n\n.message-window__reset-btn {\n  border: 1px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  padding: 5px 10px;\n  color: var(--midnight);\n  background-color: var(--mild-white);\n  font-weight: bold;\n}\n\n.message-window__reset-btn.hidden {\n  display: none;\n}\n\n.message-window__outcome {\n  font-size: 2rem;\n}\n\n.message-window__outcome.hidden {\n  display: none;\n}\n\n.message-window_error {\n  background-color: var(--error-red-color);\n}\n"],sourceRoot:""}]);const s=a},131:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,".gameboard {\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n  border: 2px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  width: clamp(280px, 30vw, 500px);\n  height: clamp(280px, 30vw, 500px);\n  color: var(--midnight);\n  font-weight: bold;\n  background-color: var(--gameboard-bg-color);\n}\n\n.gameboard_blurred {\n  filter: blur(3px);\n}\n\n/* Tiles */\n\n.gameboard__tile-grid {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-column: 2 / 11;\n  grid-row: 2 / 11;\n  border: 1px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n}\n\n.gameboard__tile {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid var(--midnight);\n  background-color: var(--tile-normal-color);\n}\n\n.gameboard_computer\n  .gameboard__tile:hover:not(.gameboard__tile_ship, .gameboard__tile_hit, .gameboard__tile_missed, .gameboard__tile_disabled) {\n  background-color: var(--tile-hover-color);\n  cursor: pointer;\n}\n\n.gameboard__tile_ship {\n  background-color: var(--ship-selected-color);\n  transition: background-color 400ms;\n}\n\n.gameboard__tile_missed {\n  background-color: var(--tile-missed-color);\n  transition: background-color 400ms;\n}\n\n.gameboard__tile_hit {\n  background-color: var(--ship-bg-color);\n  transition: background-color 400ms;\n}\n\n.gameboard__tile_placement {\n  background-color: var(--ship-selected-color);\n}\n\n/* Labels */\n\n.gameboard__col-labels {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-column: 2 / 11;\n  grid-row: 1 / 2;\n}\n\n.gameboard__row-labels {\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-column: 1 / 2;\n  grid-row: 2 / 11;\n}\n\n.gameboard__row-label,\n.gameboard__col-label {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Start window */\n\n.gameboard-wrapper {\n  position: relative;\n}\n\n.start-window {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.start-dialog {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  border: 1px solid var(--midnight);\n  width: 70%;\n  padding: 20px 0;\n  gap: 20px;\n  border-radius: 5px;\n  background-color: var(--gameboard-bg-color);\n  color: var(--midnight);\n}\n\n.start-window.hidden {\n  display: none;\n}\n\n.start-dialog__btn {\n  border: 1px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  padding: 5px 10px;\n  color: var(--midnight);\n  font-weight: bold;\n}\n\n.start-dialog__btn:disabled {\n  background-color: var(--tile-normal-color);\n  color: var(--gameboard-bg-color);\n}\n\n.start-dialog__btn:not(.start-dialog__btn:disabled):hover {\n  background-color: var(--mild-white-hover);\n  cursor: pointer;\n}\n\n.start-dialog__btn:not(.start-dialog__btn:disabled) {\n  color: var(--midnight);\n  background-color: var(--mild-white);\n}\n","",{version:3,sources:["webpack://./src/styles/gameboard.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,iCAAiC;EACjC,2CAA2C;EAC3C,gCAAgC;EAChC,iCAAiC;EACjC,sBAAsB;EACtB,iBAAiB;EACjB,2CAA2C;AAC7C;;AAEA;EACE,iBAAiB;AACnB;;AAEA,UAAU;;AAEV;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,mBAAmB;EACnB,gBAAgB;EAChB,iCAAiC;EACjC,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,iCAAiC;EACjC,0CAA0C;AAC5C;;AAEA;;EAEE,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,4CAA4C;EAC5C,kCAAkC;AACpC;;AAEA;EACE,0CAA0C;EAC1C,kCAAkC;AACpC;;AAEA;EACE,sCAAsC;EACtC,kCAAkC;AACpC;;AAEA;EACE,4CAA4C;AAC9C;;AAEA,WAAW;;AAEX;EACE,aAAa;EACb,sCAAsC;EACtC,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mCAAmC;EACnC,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA,iBAAiB;;AAEjB;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,mBAAmB;EACnB,iCAAiC;EACjC,UAAU;EACV,eAAe;EACf,SAAS;EACT,kBAAkB;EAClB,2CAA2C;EAC3C,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iCAAiC;EACjC,2CAA2C;EAC3C,iBAAiB;EACjB,sBAAsB;EACtB,iBAAiB;AACnB;;AAEA;EACE,0CAA0C;EAC1C,gCAAgC;AAClC;;AAEA;EACE,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,sBAAsB;EACtB,mCAAmC;AACrC",sourcesContent:[".gameboard {\n  display: grid;\n  grid-template-columns: repeat(11, 1fr);\n  grid-template-rows: repeat(11, 1fr);\n  border: 2px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  width: clamp(280px, 30vw, 500px);\n  height: clamp(280px, 30vw, 500px);\n  color: var(--midnight);\n  font-weight: bold;\n  background-color: var(--gameboard-bg-color);\n}\n\n.gameboard_blurred {\n  filter: blur(3px);\n}\n\n/* Tiles */\n\n.gameboard__tile-grid {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-column: 2 / 11;\n  grid-row: 2 / 11;\n  border: 1px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n}\n\n.gameboard__tile {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid var(--midnight);\n  background-color: var(--tile-normal-color);\n}\n\n.gameboard_computer\n  .gameboard__tile:hover:not(.gameboard__tile_ship, .gameboard__tile_hit, .gameboard__tile_missed, .gameboard__tile_disabled) {\n  background-color: var(--tile-hover-color);\n  cursor: pointer;\n}\n\n.gameboard__tile_ship {\n  background-color: var(--ship-selected-color);\n  transition: background-color 400ms;\n}\n\n.gameboard__tile_missed {\n  background-color: var(--tile-missed-color);\n  transition: background-color 400ms;\n}\n\n.gameboard__tile_hit {\n  background-color: var(--ship-bg-color);\n  transition: background-color 400ms;\n}\n\n.gameboard__tile_placement {\n  background-color: var(--ship-selected-color);\n}\n\n/* Labels */\n\n.gameboard__col-labels {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-column: 2 / 11;\n  grid-row: 1 / 2;\n}\n\n.gameboard__row-labels {\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-column: 1 / 2;\n  grid-row: 2 / 11;\n}\n\n.gameboard__row-label,\n.gameboard__col-label {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Start window */\n\n.gameboard-wrapper {\n  position: relative;\n}\n\n.start-window {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.start-dialog {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  border: 1px solid var(--midnight);\n  width: 70%;\n  padding: 20px 0;\n  gap: 20px;\n  border-radius: 5px;\n  background-color: var(--gameboard-bg-color);\n  color: var(--midnight);\n}\n\n.start-window.hidden {\n  display: none;\n}\n\n.start-dialog__btn {\n  border: 1px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  padding: 5px 10px;\n  color: var(--midnight);\n  font-weight: bold;\n}\n\n.start-dialog__btn:disabled {\n  background-color: var(--tile-normal-color);\n  color: var(--gameboard-bg-color);\n}\n\n.start-dialog__btn:not(.start-dialog__btn:disabled):hover {\n  background-color: var(--mild-white-hover);\n  cursor: pointer;\n}\n\n.start-dialog__btn:not(.start-dialog__btn:disabled) {\n  color: var(--midnight);\n  background-color: var(--mild-white);\n}\n"],sourceRoot:""}]);const s=a},434:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"reset.css\n  /* http://meyerweb.com/eric/tools/css/reset/ \n    v2.0 | 20110126\n    License: none (public domain)\n  */\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  /* Custom change */\n  * {\n    box-sizing: border-box;\n  }\n  ","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;;;;;;;IAmBI,SAAS;IACT,UAAU;IACV,SAAS;IACT,eAAe;IACf,aAAa;IACb,wBAAwB;EAC1B;EACA,gDAAgD;EAChD;;IAEE,cAAc;EAChB;EACA;IACE,cAAc;EAChB;EACA;IACE,gBAAgB;EAClB;EACA;IACE,YAAY;EACd;EACA;;IAEE,WAAW;IACX,aAAa;EACf;EACA;IACE,yBAAyB;IACzB,iBAAiB;EACnB;EACA,kBAAkB;EAClB;IACE,sBAAsB;EACxB",sourcesContent:["reset.css\n  /* http://meyerweb.com/eric/tools/css/reset/ \n    v2.0 | 20110126\n    License: none (public domain)\n  */\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  /* Custom change */\n  * {\n    box-sizing: border-box;\n  }\n  "],sourceRoot:""}]);const s=a},98:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"/* Ships status/selection list */\n\n.player-ship-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-self: flex-start;\n  gap: 20px;\n  width: 125px;\n}\n\n.player-ships,\n.computer-ships {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-weight: bold;\n  border: 2px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n}\n\n.player-ships {\n  width: 100%;\n}\n\n.computer-ships {\n  align-self: flex-start;\n  width: 125px;\n}\n\n.computer-ships_transparent {\n  filter: opacity(0);\n}\n\n.player-ships__ship,\n.computer-ships__ship {\n  padding: 5px;\n}\n\n.player-ships__ship:not(.player-ships__ship:last-child),\n.computer-ships__ship:not(.computer-ships__ship:last-child) {\n  border-bottom: 1px solid var(--midnight);\n}\n\n.player-ships__ship {\n  cursor: pointer;\n  background-color: var(--ship-bg-color);\n}\n\n.player-ships__ship:hover:not(.player-ships__ship_placed, .player-ships__ship_selected) {\n  background-color: var(--ship-hover-color);\n}\n\n.player-ships__ship_selected {\n  background-color: var(--ship-selected-color);\n  cursor: unset;\n}\n\n.player-ships__ship_undamaged,\n.computer-ships__ship_undamaged {\n  background-color: var(--ship-undamaged-color);\n}\n\n.player-ships__ship_damaged,\n.computer-ships__ship_damaged {\n  background-color: var(--ship-damaged-color);\n}\n\n.player-ships__ship_sunk,\n.computer-ships__ship_sunk {\n  background-color: var(--ship-bg-color);\n}\n\n/* Ship direction rotation */\n\n.ship-direction {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 5px;\n  border: 2px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  padding: 5px;\n  width: 100%;\n  color: var(--midnight);\n  font-weight: bold;\n  background-color: var(--gameboard-bg-color);\n}\n\n.ship-direction__rotator {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px;\n  border: 1px solid var(--midnight);\n  border-radius: 5px;\n  background-color: var(--mild-white);\n}\n\n.ship-direction__rotator:hover:not(.ship-direction__rotator_selected) {\n  background-color: var(--direction-hover-color);\n  cursor: pointer;\n}\n\n.ship-direction__rotator_selected {\n  background-color: var(--direction-selected-color);\n}\n\n.ship-direction__title {\n  grid-column: 1 / 4;\n  grid-row: 1 / 2;\n  text-align: center;\n}\n\n.ship-direction__rotator_up {\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n}\n\n.ship-direction__rotator_right {\n  grid-column: 3 / 4;\n  grid-row: 3 / 4;\n}\n\n.ship-direction__rotator_down {\n  grid-column: 2 / 3;\n  grid-row: 3 / 4;\n}\n\n.ship-direction__rotator_left {\n  grid-column: 1 / 2;\n  grid-row: 3 / 4;\n}\n\n.ship-direction.hidden {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/styles/ships.css"],names:[],mappings:"AAAA,gCAAgC;;AAEhC;EACE,aAAa;EACb,sBAAsB;EACtB,sBAAsB;EACtB,SAAS;EACT,YAAY;AACd;;AAEA;;EAEE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,iBAAiB;EACjB,iCAAiC;EACjC,2CAA2C;AAC7C;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;;EAEE,YAAY;AACd;;AAEA;;EAEE,wCAAwC;AAC1C;;AAEA;EACE,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,4CAA4C;EAC5C,aAAa;AACf;;AAEA;;EAEE,6CAA6C;AAC/C;;AAEA;;EAEE,2CAA2C;AAC7C;;AAEA;;EAEE,sCAAsC;AACxC;;AAEA,4BAA4B;;AAE5B;EACE,aAAa;EACb,qCAAqC;EACrC,kCAAkC;EAClC,QAAQ;EACR,iCAAiC;EACjC,2CAA2C;EAC3C,YAAY;EACZ,WAAW;EACX,sBAAsB;EACtB,iBAAiB;EACjB,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;EACZ,iCAAiC;EACjC,kBAAkB;EAClB,mCAAmC;AACrC;;AAEA;EACE,8CAA8C;EAC9C,eAAe;AACjB;;AAEA;EACE,iDAAiD;AACnD;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf",sourcesContent:["/* Ships status/selection list */\n\n.player-ship-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-self: flex-start;\n  gap: 20px;\n  width: 125px;\n}\n\n.player-ships,\n.computer-ships {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-weight: bold;\n  border: 2px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n}\n\n.player-ships {\n  width: 100%;\n}\n\n.computer-ships {\n  align-self: flex-start;\n  width: 125px;\n}\n\n.computer-ships_transparent {\n  filter: opacity(0);\n}\n\n.player-ships__ship,\n.computer-ships__ship {\n  padding: 5px;\n}\n\n.player-ships__ship:not(.player-ships__ship:last-child),\n.computer-ships__ship:not(.computer-ships__ship:last-child) {\n  border-bottom: 1px solid var(--midnight);\n}\n\n.player-ships__ship {\n  cursor: pointer;\n  background-color: var(--ship-bg-color);\n}\n\n.player-ships__ship:hover:not(.player-ships__ship_placed, .player-ships__ship_selected) {\n  background-color: var(--ship-hover-color);\n}\n\n.player-ships__ship_selected {\n  background-color: var(--ship-selected-color);\n  cursor: unset;\n}\n\n.player-ships__ship_undamaged,\n.computer-ships__ship_undamaged {\n  background-color: var(--ship-undamaged-color);\n}\n\n.player-ships__ship_damaged,\n.computer-ships__ship_damaged {\n  background-color: var(--ship-damaged-color);\n}\n\n.player-ships__ship_sunk,\n.computer-ships__ship_sunk {\n  background-color: var(--ship-bg-color);\n}\n\n/* Ship direction rotation */\n\n.ship-direction {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  gap: 5px;\n  border: 2px solid var(--midnight);\n  border-radius: var(--default-border-radius);\n  padding: 5px;\n  width: 100%;\n  color: var(--midnight);\n  font-weight: bold;\n  background-color: var(--gameboard-bg-color);\n}\n\n.ship-direction__rotator {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 5px;\n  border: 1px solid var(--midnight);\n  border-radius: 5px;\n  background-color: var(--mild-white);\n}\n\n.ship-direction__rotator:hover:not(.ship-direction__rotator_selected) {\n  background-color: var(--direction-hover-color);\n  cursor: pointer;\n}\n\n.ship-direction__rotator_selected {\n  background-color: var(--direction-selected-color);\n}\n\n.ship-direction__title {\n  grid-column: 1 / 4;\n  grid-row: 1 / 2;\n  text-align: center;\n}\n\n.ship-direction__rotator_up {\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n}\n\n.ship-direction__rotator_right {\n  grid-column: 3 / 4;\n  grid-row: 3 / 4;\n}\n\n.ship-direction__rotator_down {\n  grid-column: 2 / 3;\n  grid-row: 3 / 4;\n}\n\n.ship-direction__rotator_left {\n  grid-column: 1 / 2;\n  grid-row: 3 / 4;\n}\n\n.ship-direction.hidden {\n  display: none;\n}\n"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},465:(e,n,t)=>{e=t.nmd(e);var r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Boolean]",s="[object Date]",l="[object Function]",c="[object GeneratorFunction]",d="[object Map]",A="[object Number]",p="[object Object]",u="[object Promise]",h="[object RegExp]",g="[object Set]",m="[object String]",_="[object Symbol]",f="[object WeakMap]",C="[object ArrayBuffer]",b="[object DataView]",E="[object Float32Array]",v="[object Float64Array]",y="[object Int8Array]",B="[object Int16Array]",w="[object Int32Array]",x="[object Uint8Array]",k="[object Uint8ClampedArray]",S="[object Uint16Array]",j="[object Uint32Array]",L=/\w*$/,T=/^\[object .+?Constructor\]$/,q=/^(?:0|[1-9]\d*)$/,I={};I[i]=I["[object Array]"]=I[C]=I[b]=I[a]=I[s]=I[E]=I[v]=I[y]=I[B]=I[w]=I[d]=I[A]=I[p]=I[h]=I[g]=I[m]=I[_]=I[x]=I[k]=I[S]=I[j]=!0,I["[object Error]"]=I[l]=I[f]=!1;var O="object"==typeof t.g&&t.g&&t.g.Object===Object&&t.g,P="object"==typeof self&&self&&self.Object===Object&&self,$=O||P||Function("return this")(),R=n&&!n.nodeType&&n,D=R&&e&&!e.nodeType&&e,U=D&&D.exports===R;function M(e,n){return e.set(n[0],n[1]),e}function N(e,n){return e.add(n),e}function W(e,n,t,r){var o=-1,i=e?e.length:0;for(r&&i&&(t=e[++o]);++o<i;)t=n(t,e[o],o,e);return t}function Z(e){var n=!1;if(null!=e&&"function"!=typeof e.toString)try{n=!!(e+"")}catch(e){}return n}function Y(e){var n=-1,t=Array(e.size);return e.forEach((function(e,r){t[++n]=[r,e]})),t}function H(e,n){return function(t){return e(n(t))}}function F(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}var G,z=Array.prototype,V=Function.prototype,X=Object.prototype,J=$["__core-js_shared__"],Q=(G=/[^.]+$/.exec(J&&J.keys&&J.keys.IE_PROTO||""))?"Symbol(src)_1."+G:"",K=V.toString,ee=X.hasOwnProperty,ne=X.toString,te=RegExp("^"+K.call(ee).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),re=U?$.Buffer:void 0,oe=$.Symbol,ie=$.Uint8Array,ae=H(Object.getPrototypeOf,Object),se=Object.create,le=X.propertyIsEnumerable,ce=z.splice,de=Object.getOwnPropertySymbols,Ae=re?re.isBuffer:void 0,pe=H(Object.keys,Object),ue=$e($,"DataView"),he=$e($,"Map"),ge=$e($,"Promise"),me=$e($,"Set"),_e=$e($,"WeakMap"),fe=$e(Object,"create"),Ce=Ne(ue),be=Ne(he),Ee=Ne(ge),ve=Ne(me),ye=Ne(_e),Be=oe?oe.prototype:void 0,we=Be?Be.valueOf:void 0;function xe(e){var n=-1,t=e?e.length:0;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function ke(e){var n=-1,t=e?e.length:0;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function Se(e){var n=-1,t=e?e.length:0;for(this.clear();++n<t;){var r=e[n];this.set(r[0],r[1])}}function je(e){this.__data__=new ke(e)}function Le(e,n,t){var r=e[n];ee.call(e,n)&&We(r,t)&&(void 0!==t||n in e)||(e[n]=t)}function Te(e,n){for(var t=e.length;t--;)if(We(e[t][0],n))return t;return-1}function qe(e,n,t,r,o,u,f){var T;if(r&&(T=u?r(e,o,u,f):r(e)),void 0!==T)return T;if(!Ge(e))return e;var q=Ze(e);if(q){if(T=function(e){var n=e.length,t=e.constructor(n);return n&&"string"==typeof e[0]&&ee.call(e,"index")&&(t.index=e.index,t.input=e.input),t}(e),!n)return function(e,n){var t=-1,r=e.length;for(n||(n=Array(r));++t<r;)n[t]=e[t];return n}(e,T)}else{var O=De(e),P=O==l||O==c;if(He(e))return function(e,n){if(n)return e.slice();var t=new e.constructor(e.length);return e.copy(t),t}(e,n);if(O==p||O==i||P&&!u){if(Z(e))return u?e:{};if(T=function(e){return"function"!=typeof e.constructor||Me(e)?{}:Ge(n=ae(e))?se(n):{};var n}(P?{}:e),!n)return function(e,n){return Oe(e,Re(e),n)}(e,function(e,n){return e&&Oe(n,ze(n),e)}(T,e))}else{if(!I[O])return u?e:{};T=function(e,n,t,r){var o,i=e.constructor;switch(n){case C:return Ie(e);case a:case s:return new i(+e);case b:return function(e,n){var t=n?Ie(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.byteLength)}(e,r);case E:case v:case y:case B:case w:case x:case k:case S:case j:return function(e,n){var t=n?Ie(e.buffer):e.buffer;return new e.constructor(t,e.byteOffset,e.length)}(e,r);case d:return function(e,n,t){return W(n?t(Y(e),!0):Y(e),M,new e.constructor)}(e,r,t);case A:case m:return new i(e);case h:return function(e){var n=new e.constructor(e.source,L.exec(e));return n.lastIndex=e.lastIndex,n}(e);case g:return function(e,n,t){return W(n?t(F(e),!0):F(e),N,new e.constructor)}(e,r,t);case _:return o=e,we?Object(we.call(o)):{}}}(e,O,qe,n)}}f||(f=new je);var $=f.get(e);if($)return $;if(f.set(e,T),!q)var R=t?function(e){return function(e,n,t){var r=n(e);return Ze(e)?r:function(e,n){for(var t=-1,r=n.length,o=e.length;++t<r;)e[o+t]=n[t];return e}(r,t(e))}(e,ze,Re)}(e):ze(e);return function(e,n){for(var t=-1,r=e?e.length:0;++t<r&&!1!==n(e[t],t););}(R||e,(function(o,i){R&&(o=e[i=o]),Le(T,i,qe(o,n,t,r,i,e,f))})),T}function Ie(e){var n=new e.constructor(e.byteLength);return new ie(n).set(new ie(e)),n}function Oe(e,n,t,r){t||(t={});for(var o=-1,i=n.length;++o<i;){var a=n[o],s=r?r(t[a],e[a],a,t,e):void 0;Le(t,a,void 0===s?e[a]:s)}return t}function Pe(e,n){var t,r,o=e.__data__;return("string"==(r=typeof(t=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t)?o["string"==typeof n?"string":"hash"]:o.map}function $e(e,n){var t=function(e,n){return null==e?void 0:e[n]}(e,n);return function(e){return!(!Ge(e)||(n=e,Q&&Q in n))&&(Fe(e)||Z(e)?te:T).test(Ne(e));var n}(t)?t:void 0}xe.prototype.clear=function(){this.__data__=fe?fe(null):{}},xe.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},xe.prototype.get=function(e){var n=this.__data__;if(fe){var t=n[e];return t===r?void 0:t}return ee.call(n,e)?n[e]:void 0},xe.prototype.has=function(e){var n=this.__data__;return fe?void 0!==n[e]:ee.call(n,e)},xe.prototype.set=function(e,n){return this.__data__[e]=fe&&void 0===n?r:n,this},ke.prototype.clear=function(){this.__data__=[]},ke.prototype.delete=function(e){var n=this.__data__,t=Te(n,e);return!(t<0||(t==n.length-1?n.pop():ce.call(n,t,1),0))},ke.prototype.get=function(e){var n=this.__data__,t=Te(n,e);return t<0?void 0:n[t][1]},ke.prototype.has=function(e){return Te(this.__data__,e)>-1},ke.prototype.set=function(e,n){var t=this.__data__,r=Te(t,e);return r<0?t.push([e,n]):t[r][1]=n,this},Se.prototype.clear=function(){this.__data__={hash:new xe,map:new(he||ke),string:new xe}},Se.prototype.delete=function(e){return Pe(this,e).delete(e)},Se.prototype.get=function(e){return Pe(this,e).get(e)},Se.prototype.has=function(e){return Pe(this,e).has(e)},Se.prototype.set=function(e,n){return Pe(this,e).set(e,n),this},je.prototype.clear=function(){this.__data__=new ke},je.prototype.delete=function(e){return this.__data__.delete(e)},je.prototype.get=function(e){return this.__data__.get(e)},je.prototype.has=function(e){return this.__data__.has(e)},je.prototype.set=function(e,n){var t=this.__data__;if(t instanceof ke){var r=t.__data__;if(!he||r.length<199)return r.push([e,n]),this;t=this.__data__=new Se(r)}return t.set(e,n),this};var Re=de?H(de,Object):function(){return[]},De=function(e){return ne.call(e)};function Ue(e,n){return!!(n=null==n?o:n)&&("number"==typeof e||q.test(e))&&e>-1&&e%1==0&&e<n}function Me(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||X)}function Ne(e){if(null!=e){try{return K.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function We(e,n){return e===n||e!=e&&n!=n}(ue&&De(new ue(new ArrayBuffer(1)))!=b||he&&De(new he)!=d||ge&&De(ge.resolve())!=u||me&&De(new me)!=g||_e&&De(new _e)!=f)&&(De=function(e){var n=ne.call(e),t=n==p?e.constructor:void 0,r=t?Ne(t):void 0;if(r)switch(r){case Ce:return b;case be:return d;case Ee:return u;case ve:return g;case ye:return f}return n});var Ze=Array.isArray;function Ye(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!Fe(e)}var He=Ae||function(){return!1};function Fe(e){var n=Ge(e)?ne.call(e):"";return n==l||n==c}function Ge(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function ze(e){return Ye(e)?function(e,n){var t=Ze(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Ye(e)}(e)&&ee.call(e,"callee")&&(!le.call(e,"callee")||ne.call(e)==i)}(e)?function(e,n){for(var t=-1,r=Array(e);++t<e;)r[t]=n(t);return r}(e.length,String):[],r=t.length,o=!!r;for(var a in e)!n&&!ee.call(e,a)||o&&("length"==a||Ue(a,r))||t.push(a);return t}(e):function(e){if(!Me(e))return pe(e);var n=[];for(var t in Object(e))ee.call(e,t)&&"constructor"!=t&&n.push(t);return n}(e)}e.exports=function(e){return qe(e,!0,!0)}},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],d=i[c]||0,A="".concat(c," ").concat(d);i[c]=d+1;var p=t(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=o(u,r);r.byIndex=s,n.splice(s,0,{identifier:A,updater:h,references:1})}a.push(A)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=r(e,o),c=0;c<i.length;c++){var d=t(i[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=l}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},530:(e,n,t)=>{const r=t(465),o=t(39),{toGridCoord:i,toTileStr:a}=t(636),{GameboardErrors:s,ShipErrors:l}=t(581);e.exports=()=>{let e=[...new Array(10)].map((()=>[...new Array(10)].map((()=>({ship:null,status:0})))));const n=[],t=(n,t)=>{for(let r=n-1;r<=n+1;r++)if(e[r])for(let n=t-1;n<=t+1;n++)if(e[r][n]&&e[r][n].ship)return!0;return!1},c=(a,l)=>{const c=o(a,l),d=c.getPosition().direction,A=r(e),p=i(c.getPosition().origin);if("UP"===d){let{row:e,col:n}=p;for(let r=a;r>0;r--){if(t(e,n))throw new Error(s.proximity);A[e][n].ship=c,e--}}else if("DOWN"===d){let{row:e,col:n}=p;for(let r=a;r>0;r--){if(t(e,n))throw new Error(s.proximity);A[e][n].ship=c,e++}}else if("LEFT"===d){let{row:e,col:n}=p;for(let r=a;r>0;r--){if(t(e,n))throw new Error(s.proximity);A[e][n].ship=c,n--}}else{if("RIGHT"!==d)throw new Error("Cannot place ship: Ship direction invalid");{let{row:e,col:n}=p;for(let r=a;r>0;r--){if(t(e,n))throw new Error(s.proximity);A[e][n].ship=c,n++}}}return n.push(c),e=A,c};return{placeShip:c,getTile:n=>{const{row:t,col:r}=i(n);return e[t]&&e[t][r]?e[t][r]:null},receiveAttack:n=>{let t;try{const{row:r,col:o}=i(n);t=e[r][o]}catch{throw new Error(s.invalidTileStr)}return 0===t.status&&(t.ship?(t.ship.hit(),t.status=2):t.status=1,!0)},isDefeated:()=>0!==n.length&&!(n.filter((e=>!e.isSunk())).length>0),getShipCount:()=>n.length,removeShip:t=>{if(!t)return;const r=i(t.getPosition().origin),o=t.getPosition().direction,a=t.getLength();if("UP"===o){let{row:n,col:t}=r;for(let r=a;r>0;r--)e[n][t].ship=null,n--}else if("DOWN"===o){let{row:n,col:t}=r;for(let r=a;r>0;r--)e[n][t].ship=null,n++}else if("LEFT"===o){let{row:n,col:t}=r;for(let r=a;r>0;r--)e[n][t].ship=null,t--}else if("RIGHT"===o){let{row:n,col:t}=r;for(let r=a;r>0;r--)e[n][t].ship=null,t++}n.splice(n.indexOf(t),1)},placeShipRandom:e=>{if(!e)throw new Error(s.missingLengthArg);if(5===n.length)throw new Error(s.maxShipCount);const t=["UP","RIGHT","DOWN","LEFT"];let r=null;for(;!r;){const n=Math.floor(10*Math.random()),o=Math.floor(10*Math.random()),i=a(n,o);let d=Math.floor(4*Math.random()),A=t[d];for(let n=0;n<4;n++)try{r=c(e,{origin:i,direction:A});break}catch(e){e.message===s.proximity||e.message===l.invalidShipPosition?A=t[++d%4]:console.error(e)}}return r},checkProximity:t}}},400:(e,n,t)=>{const{toGridCoord:r,toTileStr:o}=t(636),{PlayerErrors:i}=t(581);e.exports=e=>{const n=e||"Computer",t=[];for(let e=65;e<=74;e++)for(let n=1;n<=10;n++)t.push(String.fromCharCode(e).concat(n.toString()));const a=[];let s=null;const l=(e,n,t=null)=>{let s=null;if("UP"===t||"DOWN"===t)s="VERTICAL";else if("LEFT"===t||"RIGHT"===t)s="HORIZONTAL";else if(t)throw new Error(i.invalidDirection);const{row:l,col:c}=r(e);if(a.splice(0),!s||"VERTICAL"===s){let e=n.getTile(o(l-1,c));e&&0===e.status&&a.push(o(l-1,c)),e=n.getTile(o(l+1,c)),e&&0===e.status&&a.push(o(l+1,c))}if(!s||"HORIZONTAL"===s){let e=n.getTile(o(l,c+1));e&&0===e.status&&a.push(o(l,c+1)),e=n.getTile(o(l,c-1)),e&&0===e.status&&a.push(o(l,c-1))}};return{getName:()=>n,isHuman:()=>!!e,attack:(e,n=null)=>{if(n)return e.receiveAttack(n)?n:null;if(0===t.length)throw new Error(i.noValidMoves);if(a.length>0){const n=Math.floor(Math.random()*a.length),c=a[n];if(!e.receiveAttack(c))throw new Error(i.compAttackFailed);t.splice(t.indexOf(c),1),a.splice(n,1);const d=e.getTile(c);return 2!==d.status||d.ship.isSunk()?2===d.status&&d.ship.isSunk()?(s=null,a.splice(0),((e,n)=>{const i=e.getLength(),a=e.getPosition().direction,s=e.getPosition().origin;let{row:l,col:c}=r(s);for(let e=0;e<i;e++){for(let e=l-1;e<=l+1;e++)for(let r=c-1;r<=c+1;r++)if(n.getTile(o(e,r))){const n=t.indexOf(o(e,r));n>=0&&t.splice(n,1)}"UP"===a?l--:"RIGHT"===a?c++:"DOWN"===a?l++:"LEFT"===a&&c--}})(d.ship,e)):0!==a.length||e.getTile(s).ship.isSunk()||l(s,e,e.getTile(s).ship.getPosition().direction):(l(c,e,d.ship.getPosition().direction),0!==a.length||e.getTile(s).ship.isSunk()||l(s,e,e.getTile(s).ship.getPosition().direction)),c}const c=Math.floor(Math.random()*t.length),d=t.at(c);if(!e.receiveAttack(d))throw new Error(i.compAttackFailed);return 2===e.getTile(d).status&&(s=d,l(d,e)),t.splice(c,1),d}}}},39:e=>{e.exports=(e,n)=>{if(!Number.isInteger(e)||e<2||e>5)throw new Error("Invalid ship length");if(!((e,n)=>{try{const t=n.origin.slice(0,1).toUpperCase(),r=parseInt(n.origin.slice(1),10);if(!t.match(/[A-J]/)||!(r>=1&&r<=10))return!1;const o=n.direction.toUpperCase();if("UP"!==o&&"DOWN"!==o&&"LEFT"!==o&&"RIGHT"!==o)return!1;if("UP"===o&&t.charCodeAt(0)-(e-1)<65||"DOWN"===o&&t.charCodeAt(0)+(e-1)>74||"LEFT"===o&&r-(e-1)<1||"RIGHT"===o&&r+(e-1)>10)return!1}catch{return!1}return!0})(e,n))throw new Error("Invalid ship position");const t=e,r={origin:n.origin.toUpperCase(),direction:n.direction.toUpperCase()};let o=0;return{getLength:()=>t,getHits:()=>o,isSunk:()=>o>=t,getPosition:()=>JSON.parse(JSON.stringify(r)),hit:()=>{o+=1}}}},581:e=>{e.exports={GameboardErrors:{proximity:"Ship cannot be placed too close to others",invalidTileStr:"Invalid tile string",missingLengthArg:"Missing length argument",maxShipCount:"Max ship count reached"},ShipErrors:{invalidShipLength:"Invalid ship length",invalidShipPosition:"Invalid ship position"},PlayerErrors:{noValidMoves:"No valid moves remaining",compAttackFailed:"Computer attack failed",invalidDirection:"Invalid direction"}}},636:e=>{e.exports={toGridCoord:e=>({row:e.slice(0,1).toUpperCase().charCodeAt(0)-65,col:parseInt(e.slice(1),10)-1}),toTileStr:(e,n)=>String.fromCharCode(65+e).concat(`${n+1}`),statusToString:e=>1===e?"missed":2===e?"hit":""}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,loaded:!1,exports:{}};return e[r](i,i.exports,t),i.loaded=!0,i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),t.nc=void 0,(()=>{"use strict";var e=t(379),n=t.n(e),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),l=t.n(s),c=t(216),d=t.n(c),A=t(589),p=t.n(A),u=t(434),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),n()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;var g=t(177),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),n()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;var _=t(131),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),n()(_.Z,f),_.Z&&_.Z.locals&&_.Z.locals;var C=t(98),b={};b.styleTagTransform=p(),b.setAttributes=l(),b.insert=a().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=d(),n()(C.Z,b),C.Z&&C.Z.locals&&C.Z.locals;var E=t(400),v=t.n(E),y=t(530),B=t.n(y),w=t(636);let x=null,k=null,S=null,j=null,L=null,T=[],q=[],I=0,O=0;const P=e=>{if(e.currentTarget.classList.contains("gameboard__tile_missed")||e.currentTarget.classList.contains("gameboard__tile_hit"))return;const n=e.currentTarget.getAttribute("data-tile");if(x.attack(j,n)){I++,$(j,!1),j.getTile(n).ship&&j.getTile(n).ship.isSunk()&&N(!1);const e=(0,w.statusToString)(j.getTile(n).status);K(`You attacked ${n} and ${e}.`),j.isDefeated()?V(x):X()}},$=(e,n)=>{let t;t=e===S?document.querySelector(".gameboard_player > .gameboard__tile-grid"):document.querySelector(".gameboard_computer > .gameboard__tile-grid"),[...t.children].forEach((t=>{t.classList.remove("gameboard__tile_ship"),t.classList.remove("gameboard__tile_missed"),t.classList.remove("gameboard__tile_hit");const r=e.getTile(t.getAttribute("data-tile"));n&&r.ship&&t.classList.add("gameboard__tile_ship"),1===r.status&&t.classList.add("gameboard__tile_missed"),2===r.status&&t.classList.add("gameboard__tile_hit")}))},R=()=>{[...document.querySelectorAll(".gameboard_player .gameboard__tile")].forEach((e=>{e.classList.remove("gameboard__tile_placement")}))},D=e=>{if(!L)return;R();let n=e.currentTarget,t=n.getAttribute("data-tile"),r=t.slice(0,1).toUpperCase(),o=parseInt(t.slice(1),10);if(n.classList.add("gameboard__tile_placement"),"UP"===L.direction)for(let e=0;e<L.length-1&&(r=String.fromCharCode(r.charCodeAt(0)-1),!(r.charCodeAt(0)<65));e++)t=`${r}${o}`,n=document.querySelector(`.gameboard__tile_pos_${t}`),n.classList.add("gameboard__tile_placement");if("RIGHT"===L.direction)for(let e=0;e<L.length-1&&(o++,!(o>10));e++)t=`${r}${o}`,n=document.querySelector(`.gameboard__tile_pos_${t}`),n.classList.add("gameboard__tile_placement");if("DOWN"===L.direction)for(let e=0;e<L.length-1&&(r=String.fromCharCode(r.charCodeAt(0)+1),!(r.charCodeAt(0)>74));e++)t=`${r}${o}`,n=document.querySelector(`.gameboard__tile_pos_${t}`),n.classList.add("gameboard__tile_placement");if("LEFT"===L.direction)for(let e=0;e<L.length-1&&(o--,!(o<1));e++)t=`${r}${o}`,n=document.querySelector(`.gameboard__tile_pos_${t}`),n.classList.add("gameboard__tile_placement")},U=e=>{if(L)try{const n=e.currentTarget.getAttribute("data-tile"),t=S.placeShip(L.length,{origin:n,direction:L.direction});T.push({type:L.type,ref:t}),K(`You have placed your ${L.type}.`);const r=document.querySelector(`.player-ships__ship_${L.type}`);r.removeEventListener("click",W),r.addEventListener("click",Z),r.classList.add("player-ships__ship_placed"),L=null,document.querySelector(".ship-direction").classList.add("hidden"),J(),M(),Y(),$(S,!0)}catch(e){ee(e.message.concat("."))}},M=()=>{[...document.querySelectorAll(".player-ships__ship")].forEach((e=>{e.classList.remove("player-ships__ship_selected");const n=e.getAttribute("data-ship"),t=T.find((e=>e.type===n));t&&(t.ref.isSunk()?(e.classList.remove("player-ships__ship_damaged"),e.classList.add("player-ships__ship_sunk")):t.ref.getHits()>0?(e.classList.remove("player-ships__ship_undamaged"),e.classList.add("player-ships__ship_damaged")):e.classList.add("player-ships__ship_undamaged"))}))},N=(e=!0)=>{[...document.querySelectorAll(".computer-ships__ship")].forEach((n=>{const t=n.getAttribute("data-ship"),r=q.find((e=>e.type===t));r&&(r.ref.isSunk()?(n.classList.remove("computer-ships__ship_damaged"),n.classList.add("computer-ships__ship_sunk")):e&&r.ref.getHits()>0?(n.classList.remove("computer-ships__ship_undamaged"),n.classList.add("computer-ships__ship_damaged")):n.classList.add("computer-ships__ship_undamaged"))}))},W=e=>{const n=[...document.querySelectorAll(".player-ships__ship")],t=e.currentTarget.getAttribute("data-ship");if(n.forEach((e=>{e.classList.remove("player-ships__ship_selected")})),e.currentTarget.classList.add("player-ships__ship_selected"),"carrier"===t)L={type:t,length:5,direction:"DOWN"};else if("battleship"===t)L={type:t,length:4,direction:"DOWN"};else if("cruiser"===t)L={type:t,length:3,direction:"DOWN"};else if("submarine"===t)L={type:t,length:3,direction:"DOWN"};else{if("destroyer"!==t)throw new Error("Invalid ship type attribute");L={type:t,length:2,direction:"DOWN"}}K(`You have selected your ${t}.`),H()},Z=e=>{const n=e.currentTarget.getAttribute("data-ship"),t=T.find((e=>e.type===n));if(!t)throw new Error("Unable to remove non-existant ship");T.splice(T.indexOf(t),1),S.removeShip(t.ref),L=null,e.currentTarget.removeEventListener("click",Z),e.currentTarget.addEventListener("click",W),e.currentTarget.classList.remove("player-ships__ship_placed"),e.currentTarget.classList.remove("player-ships__ship_undamaged"),J(),M(),$(S,!0),K(`You have removed your ${n}.`)},Y=()=>{[...document.querySelectorAll(".ship-direction__rotator")].forEach((e=>{e.classList.remove("ship-direction__rotator_selected")}))},H=()=>{if(!L)return;document.querySelector(".ship-direction").classList.remove("hidden"),Y();let e=null;"UP"===L.direction?e=document.querySelector(".ship-direction__rotator_up"):"RIGHT"===L.direction?e=document.querySelector(".ship-direction__rotator_right"):"DOWN"===L.direction?e=document.querySelector(".ship-direction__rotator_down"):"LEFT"===L.direction&&(e=document.querySelector(".ship-direction__rotator_left")),e.classList.add("ship-direction__rotator_selected")},F=e=>{L&&(L.direction=e.currentTarget.getAttribute("data-dir"),H())},G=()=>{document.querySelector(".start-window").classList.add("hidden");const e=document.querySelector(".gameboard_computer"),n=document.querySelector(".computer-ships");e.classList.remove("gameboard_blurred"),n.classList.remove("computer-ships_transparent"),[...document.querySelectorAll(".player-ships__ship")].forEach((e=>{e.style.setProperty("cursor","unset"),e.removeEventListener("click",Z)})),[...document.querySelectorAll(".gameboard_computer .gameboard__tile")].forEach((e=>{e.addEventListener("click",P),e.classList.remove("gameboard__tile_disabled")})),N(),K("Game started!"),K("Click on the enemy tiles to attack.",!0)},z=()=>{x=v()("Player"),k=v()(),S=B()(),j=B()(),T=[],q=[],I=0,O=0,$(S,!0),$(j,!1),Q(),M(),N(),J(),[...document.querySelectorAll(".player-ships__ship")].forEach((e=>{e.style.setProperty("cursor","pointer"),e.addEventListener("click",W),e.classList.remove("player-ships__ship_undamaged"),e.classList.remove("player-ships__ship_damaged"),e.classList.remove("player-ships__ship_sunk"),e.classList.remove("player-ships__ship_placed")})),[...document.querySelectorAll(".computer-ships__ship")].forEach((e=>{e.classList.remove("computer-ships__ship_undamaged"),e.classList.remove("computer-ships__ship_damaged"),e.classList.remove("computer-ships__ship_sunk")})),document.querySelector(".message-window__reset-btn").classList.add("hidden"),document.querySelector(".start-window").classList.remove("hidden");const e=document.querySelector(".gameboard_computer"),n=document.querySelector(".computer-ships");e.classList.add("gameboard_blurred"),n.classList.add("computer-ships_transparent"),document.querySelector(".message-window__outcome").classList.add("hidden"),K("Click on your ships to place them in the grid."),document.querySelector(".start-dialog__status").textContent="Place your ships to start."},V=e=>{[...document.querySelectorAll(".gameboard_computer .gameboard__tile")].forEach((e=>{e.removeEventListener("click",P),e.classList.add("gameboard__tile_disabled")})),document.querySelector(".message-window__reset-btn").classList.remove("hidden");const n=document.querySelector(".message-window__outcome");n.classList.remove("hidden"),e.isHuman()?(n.textContent="You won!",K(`You sunk all their ships in ${I} shots!`,!0)):(n.textContent="You lost!",K(`They sunk all your ships in ${O} shots!`,!0))},X=()=>{const e=k.attack(S);O++,$(S,!0),M();const n=(0,w.statusToString)(S.getTile(e).status);K(`The enemy attacked ${e} and ${n}.`,!0),S.isDefeated()&&(N(),$(j,!0),V(k))},J=()=>{const e=T.length,n=document.querySelector(".start-dialog__btn"),t=document.querySelector(".start-dialog__status");5===e?(n.removeAttribute("disabled"),t.textContent="The game is ready to start."):(n.setAttribute("disabled",!0),t.textContent="Place your ships to start."),document.querySelector(".start-dialog__ship-counter").textContent=`${T.length}/5 ships placed.`},Q=()=>{q.push({type:"carrier",ref:j.placeShipRandom(5)}),q.push({type:"battleship",ref:j.placeShipRandom(4)}),q.push({type:"cruiser",ref:j.placeShipRandom(3)}),q.push({type:"submarine",ref:j.placeShipRandom(3)}),q.push({type:"destroyer",ref:j.placeShipRandom(2)})},K=(e,n=!1)=>{const t=document.querySelector(".message-window__messages"),r=document.createElement("div");if(r.classList.add("messages__msg"),r.textContent=e,document.querySelector(".message-window").classList.remove("message-window_error"),n)t.appendChild(r);else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(r)}},ee=e=>{const n=document.querySelector(".message-window__messages");for(;n.firstChild;)n.removeChild(n.firstChild);const t=document.createElement("div");t.classList.add("messages__msg"),t.textContent=e,document.querySelector(".message-window").classList.add("message-window_error"),n.appendChild(t)};(()=>{const e=document.querySelector(".gameboard_player > .gameboard__tile-grid"),n=document.querySelector(".gameboard_computer > .gameboard__tile-grid");let t=65;for(;t<=74;t++)for(let r=1;r<=10;r++){const o=String.fromCharCode(t).concat(r.toString()),i=document.createElement("div");i.classList.add("gameboard__tile"),i.classList.add(`gameboard__tile_pos_${o}`),i.setAttribute("data-tile",o),e.appendChild(i);const a=document.createElement("div");a.classList.add("gameboard__tile"),a.classList.add(`gameboard__tile_pos_${o}`),a.setAttribute("data-tile",o),n.appendChild(a)}})(),x=v()("Player"),k=v()(),S=B()(),j=B()(),Q(),[...document.querySelectorAll(".gameboard_player .gameboard__tile")].forEach((e=>{e.addEventListener("mouseover",D),e.addEventListener("click",U)})),[...document.querySelectorAll(".player-ships__ship")].forEach((e=>e.addEventListener("click",W))),[...document.querySelectorAll(".ship-direction__rotator")].forEach((e=>{e.addEventListener("click",F)})),document.querySelector(".gameboard_player .gameboard__tile-grid").addEventListener("mouseleave",R),document.querySelector(".start-dialog__btn").addEventListener("click",G),document.querySelector(".message-window__reset-btn").addEventListener("click",z)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,